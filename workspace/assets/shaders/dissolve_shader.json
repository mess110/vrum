{
  "uniforms": "{ texture: { type: 't', value: AssetManager.get('smokeparticle.png') }, noise: { type: 't', value: AssetManager.get('smokeparticle.png') }, dissolve: { type: 'f', value: 0.0 } }",
  "fragment": "varying vec2 vUv;\nuniform sampler2D texture;\nuniform sampler2D noise;\n\nuniform float dissolve;\nvoid main() {\n  vec4 color = texture2D( texture, vUv );\n  float n = texture2D( noise, vUv ).x;\n  n = ( n - dissolve ) * 50.0;\n  if (n < 0.0) {\n    discard;\n  }\n  if (n < 1.0) {\n    color.r = 1.0; color.g = 0.5; color.b = 0.0;\n  }\n  gl_FragColor = color;\n}",
  "vertex": "varying vec2 vUv;\nuniform float morphTargetInfluences[ 8 ];\n\nvoid main() {\n  vUv = uv;\n\n  vec3 morphed = vec3( 0.0 );\n  morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n  morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n  morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n  morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n  morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n  morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n  morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n  morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n  morphed += position;\n  vec4 mvPosition;\n  mvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n  gl_Position = projectionMatrix * mvPosition;\n  //vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n}"
}
